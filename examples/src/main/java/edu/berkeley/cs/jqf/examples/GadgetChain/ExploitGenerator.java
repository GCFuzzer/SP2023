package edu.berkeley.cs.jqf.examples.GadgetChain;

import com.pholser.junit.quickcheck.generator.GenerationStatus;
import com.pholser.junit.quickcheck.generator.Generator;
import com.pholser.junit.quickcheck.random.SourceOfRandomness;

import java.io.*;
import java.lang.Object;
import java.lang.reflect.Field;
import java.lang.reflect.Modifier;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.PriorityQueue;

import com.pholser.junit.quickcheck.internal.GeometricDistribution;
import edu.berkeley.cs.jqf.examples.common.Dictionary;
import org.apache.commons.collections4.comparators.TransformingComparator;
import org.apache.commons.collections4.functors.InvokerTransformer;
import sun.misc.Unsafe;

/**
 * @author Sicong Cao
 */

public class ExploitGenerator extends Generator<Object> {

    private static final GeometricDistribution geom = new GeometricDistribution();
    private static final double MEAN_ARRAY_DEPTH = 1.2;
    /*    private String gadgetChain;*/
    private final List<Object> dictionary = new ArrayList<>();

    public ExploitGenerator () {
        super(Object.class);
    }

    public void configure(Dictionary dict) throws IOException {
        // Read dictionary words
        try (InputStream in = ClassLoader.getSystemClassLoader().getResourceAsStream(dict.value())) {
            if (in == null) {
                throw new FileNotFoundException("Dictionary file not found: " + dict);
            }

            BufferedReader br = new BufferedReader(new InputStreamReader(in));
            String item;
            while ((item = br.readLine()) != null) {
                dictionary.add(objectInit(item));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static Object objectInit (String classname) throws Exception {
        Class<?> target_classname = Class.forName(classname);
        Field f = Unsafe.class.getDeclaredField("theUnsafe");
        f.setAccessible(true);
        Unsafe unsafe = (Unsafe) f.get(null);
        return unsafe.allocateInstance(target_classname);
    }

    @Override
    public Object generate(SourceOfRandomness random, GenerationStatus status) {

        for (int idx = 0; idx < dictionary.size() - 1; idx++) {
            Field[] target_field = dictionary.get(idx).getClass().getDeclaredFields();//获取所有属性
            for (Field field : target_field) {
                field.setAccessible(true);
                if (Modifier.isFinal(field.getModifiers())) {
                    if (field.getType().isAssignableFrom(dictionary.get(idx + 1).getClass())) {
                        try {
                            field.set(dictionary.get(idx), dictionary.get(idx + 1));
                        } catch (IllegalAccessException e) {
                            e.printStackTrace();
                        }
                    }
                    continue;
                }
                if (field.getType().equals(int.class)) {
                    try {
                        field.set(dictionary.get(idx), random.nextInt(0, 5));
                    } catch (IllegalAccessException e) {
                        e.printStackTrace();
                    }
                }
                if (field.getType().equals(long.class)) {
                    try {
                        field.set(dictionary.get(idx), random.nextLong(Long.MIN_VALUE, Long.MAX_VALUE));
                    } catch (IllegalAccessException e) {
                        e.printStackTrace();
                    }
                }
                if (field.getType().equals(short.class)) {
                    try {
                        field.set(dictionary.get(idx), random.nextShort(Short.MIN_VALUE, Short.MAX_VALUE));
                    } catch (IllegalAccessException e) {
                        e.printStackTrace();
                    }
                }
                if (field.getType().equals(byte.class)) {
                    try {
                        field.set(dictionary.get(idx), random.nextLong(Byte.MIN_VALUE, Byte.MAX_VALUE));
                    } catch (IllegalAccessException e) {
                        e.printStackTrace();
                    }
                }
                if (field.getType().equals(boolean.class)) {
                    try {
                        field.set(dictionary.get(idx), random.nextBoolean());
                    } catch (IllegalAccessException e) {
                        e.printStackTrace();
                    }
                }
                if (field.getType().equals(float.class)) {
                    try {
                        field.set(dictionary.get(idx), random.nextFloat(Float.MIN_VALUE, Float.MAX_VALUE));
                    } catch (IllegalAccessException e) {
                        e.printStackTrace();
                    }
                }
                if (field.getType().equals(double.class)) {
                    try {
                        field.set(dictionary.get(idx), random.nextDouble(Double.MIN_VALUE, Double.MAX_VALUE));
                    } catch (IllegalAccessException e) {
                        e.printStackTrace();
                    }
                }
                if (field.getType().equals(char.class)) {
                    try {
                        field.set(dictionary.get(idx), random.nextChar(Character.MIN_VALUE, Character.MAX_VALUE));
                    } catch (IllegalAccessException e) {
                        e.printStackTrace();
                    }
                }
                if (field.getType().isArray() && Object.class.isAssignableFrom(field.getType())) {
                    int depth = geom.sampleWithMean(MEAN_ARRAY_DEPTH, random);
                    Object[] objects = new Object[depth];
                    for (int i = 0; i < depth; i++) {
                        int choice = random.nextInt(dictionary.size());
                        try {
                            objects[i] = dictionary.get(choice);
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                    try {
                        field.set(dictionary.get(idx), objects);
                    } catch (IllegalAccessException e) {
                        e.printStackTrace();
                    }
                }
            }
        }

        return dictionary.get(0);

    }
}
